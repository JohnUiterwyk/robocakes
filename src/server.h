/**
 * @file server.h
 */

/*
 * Copyright (C) 2013 John Uiterwyk, Virginia King, Stewart Johnston
 */
#ifndef _SERVER_H_
#define _SERVER_H_
#include <stdio.h>
#include "tcp_server_lib.h"
#include "sim_lib.h"
#include "util.h"
#include "timeloop_lib.h"


/**
 * The current state of a running server.
 */
typedef struct {
  /** Timing information. */
  timeloop_data_t * time_data;
  /** TCP connection. */
  tcp_server_data_t * tcp_server;
  /** Current simulation state. */
  sim_data_t * sim_data;
  /** Message to be sent over the network. */
  char message[MAX_BUFFER_LEN];

} server_data_t;

/**
 * Starts the server and the simulation.
 *
 * @param Configuration information generated by main, either from
 * config files or command line arguments.
 */
void server_start(struct configuration * conf);

/**
 * Initialized the server_data struct to defaults.
 *
 * A server_data_t struct is the object that stores the top-level state
 * of a running server. It holds a reference to the tcp server, tracks
 * time passing and stores the simulation data.
 */
server_data_t* server_int();

/**
 * Tick callback for server.
 *
 * Note that two buffers are used for simdata - one is read from while
 * the other is written to, and then if an update is required the
 * pointers are switched.
 * This ensures that any read or write to shared memory is kept to an
 * absolute minimum number of operations - it's a simple pointer
 * assignment.
 */
void * server_timer_tick(void *);
#endif
